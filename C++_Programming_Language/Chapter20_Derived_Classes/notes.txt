
20.1 Introduction ------------------

Derived classes and their mechanism help express commonaity and hierarchical
relationships.

Implementation inheritance: inherit facilities from base class to derived class.

Interface inheritance: use several different derived classes interchangeably thru 
the common interface of base class.

Interface inheritane = dynamic polymorphism or runtime polymorphism.
Templates = static polymorphims

20.2 Derived Classes ----------------

BaseClass* pb = new BaseClass
 (DerivedClass * )pb   is a valid pointer to object of derive, but the methods
        and available in derived class will used data members not initialized.
        
20.2.1 Member functions ..........

Nothing to add. 


20.2.2 Constructors and Destructors ......

Base constructor -> Data constructors -> Derived constructor

We build from the roots (base classes) toward the leaves (derived classes).


20.3.1 Type Fields ............

if Base* bp = new Derived()
bp->fun_virt()   calls the redefinition in derived if any
bp->fun_no_virt() calls version in base 

if Derived* dp = (Dervived*)new Base()
dp->fun_virt() calls version in base
dp->fun_no_virt() calls version in derived ( even if their fields are not properly init)

