6.3 Declarations

A definition is a declaration that supplies all that is needed in a program 
for the use of an entity. Not necessarily set memory aside.


STRUCTURE OF A DECLARATION:
- Optional specifiers: STATIC, VIRTUAL, EXTERN, CONSTEXPR
- Base type: CONST T, vector<T>,
- A declarator: NAME, *NAME, &NAME
- Optional suffix function specifiers: const, noexcept
- Optional initializer

declarator operators: *, *const, *volatile, &, &&, auto, [], (), ->

6.3.4 Scope ----------------------

local name: from declaration to block termination
parameters are local 

member name: outside all functions in a class and its scope is
in the entire body of the class {}.

namespace name: inside the definition of namespace but outside
all functions, lambdas, classes, enums, other namespaces.

global name: outside of any construct 

statement name: defined in for, while, if; since () and their
scope ends with the } delimiting the construct body.

fuction scope: from declaration until the end of the function.

each name belogs to a scope: local scope, member scope, namespace
scope ... global scope.


6.3.5 Initialization -----------------





